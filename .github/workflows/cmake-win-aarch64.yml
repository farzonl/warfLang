name: CMake MSVC ARM64 Cross Build 
on:
  push:
    branches:
      - master
    paths:
      - '**.cpp'
      - '**.h'
      - '**CMakeLists.txt'
      - .github/workflows/cmake-win-aarch64.yml
  pull_request:
    branches:
      - '**'
    paths:
      - '**.cpp'
      - '**.h'
      - '**CMakeLists.txt'
      - .github/workflows/cmake-win-aarch64.yml
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest]
        include:
          - os: windows-latest
            artifact_exec_ext: .exe
            artifact_dlib_ext: .dll
            artifact_staticlib_ext: .lib
            # Note: I wanted to use env.BUILD_TYPE, but it isn't taking
            #artifact_out_dir: ${{ BUILD_TYPE }}/
            artifact_out_dir: Release/
            artifact_os_name: Windows
            artifact_arch: arm64
    steps:
    - uses: actions/checkout@v2
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
    - name: Cache C++ dependencies in Packages Directory
      uses: actions/cache@v3
      with:
        path: |
          packages
        key: ${{ runner.OS }}-c++-packages-cache-Arm64-Release-${{ hashFiles('depsCache.json') }}
        restore-keys: |
          ${{ runner.OS }}-c++-packages-cache-Arm64-Release-
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBuildTest=TRUE -G "Visual Studio 17 2022" -A ARM64
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
    - name: Set variables (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $APP = type .\src\lib\Version\appName.txt
        $VER = type .\src\lib\Version\version.txt
        echo "VERSION=$VER" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "APPNAME=$APP" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    - name: Prepare Binaries for upload (windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        [system.io.directory]::CreateDirectory("${{github.workspace}}/artifacts")
        Copy-Item "build/src/lib/${{ matrix.artifact_out_dir}}${{ env.APPNAME }}Core${{ matrix.artifact_staticlib_ext }}" -Destination "${{github.workspace}}/artifacts"
        Copy-Item "build/src/cli/${{ matrix.artifact_out_dir }}${{ env.APPNAME }}${{ matrix.artifact_exec_ext }}" -Destination "${{github.workspace}}/artifacts"
        Compress-Archive -Path ${{github.workspace}}/artifacts/* -DestinationPath ${{ env.APPNAME }}-${{matrix.artifact_os_name}}-${{matrix.artifact_arch}}.zip
    - name: 'Upload Pull Request Artifact'
      uses: actions/upload-artifact@v3
      if: startsWith(github.ref, 'refs/pull/')
      with:
        name: ${{ env.APPNAME }} Pull Request Artifacts
        path: ${{ env.APPNAME }}-*.zip
        retention-days: 5
    - name: Upload binaries to Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/heads/master')
      with:
        tag_name: ${{ env.APPNAME }}-${{ env.VERSION }}
        files: |
          ${{ env.APPNAME }}-*.zip