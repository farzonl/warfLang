name: CMake llvm cross build

on:
  push:
    branches:
      - master
      - feature/llvmWinBuild
    paths:
      - '**.cpp'
      - '**.h'
      - '**CMakeLists.txt'
      - .github/workflows/cmake-win-llvm-cross.yml
  pull_request:
    branches:
      - '**'
    paths:
      - '**.cpp'
      - '**.h'
      - '**CMakeLists.txt'
      - .github/workflows/cmake-win-llvm-cross.yml
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: true
    steps:
    - uses: actions/checkout@v2
    - name: install Linux cross-build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install clang-tools clang lld lldb  \
        llvm-dev libclang-dev wget curl ca-certificates \
        zip unzip vim wine cmake msitools p7zip-full ninja-build python3
    - name: install Mac cross-build dependencies
      if: matrix.os == 'macos-latest'
      run: brew install llvm cmake ninja msitools p7zip python3
    - name: Create Packages Environment
      working-directory: ${{github.workspace}}
      run: |
        mkdir packages
        
    - name: Cache C++ dependencies in Packages Directory
      uses: actions/cache@v3
      with:
        path: |
          packages
        key: ${{ runner.OS }}-c++-packages-cache-win-llvm-cross-Release-${{ hashFiles('scripts/download_win_sysroot.sh') }}
        restore-keys: |
          ${{ runner.OS }}-c++-packages-cache-win-llvm-cross-Release
    
    - name: setup sysroot
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        cd packages
        ../scripts/download_win_sysroot.sh
        ../scripts/vfs_overlay.sh
        python3 ../scripts/rename.py win_sysroot

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
    
    - name: Configure CMake (MacOS)
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      if: matrix.os == 'macos-latest'
      run: |
       cmake -GNinja -S . -B build  \
       -DBuildTest=TRUE \
       -DCMAKE_TOOLCHAIN_FILE=cmake_config/llvm-win-cross.cmake
    
    - name: Configure CMake Linux
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: |
       cmake -GNinja -S . -B build  \
       -DCMAKE_TOOLCHAIN_FILE=cmake_config/llvm-win-cross.cmake

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Set variables
      run: |
        APP=$(cat $GITHUB_WORKSPACE/src/lib/Version/appName.txt)
        VER=$(cat $GITHUB_WORKSPACE/src/lib/Version/version.txt)
        echo "VERSION=$VER" >> $GITHUB_ENV
        echo "APPNAME=$APP" >> $GITHUB_ENV
    
    - name: Prepare Binaries for upload (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run:  |
        mkdir ${{github.workspace}}/artifacts
        cp build/src/lib/${{ env.APPNAME }}Core.lib ${{github.workspace}}/artifacts
        cp build/src/cli/${{ env.APPNAME }}.exe ${{github.workspace}}/artifacts
        
        pushd ${{github.workspace}}
        zip -r ${{ env.APPNAME }}-$(uname -s)-$(uname -m)-llvm-win-cross.zip artifacts
        popd
    
    - name: Prepare Binaries for upload (Mac)
      if: matrix.os == 'macOS-latest'
      shell: bash
      run:  |
        mkdir ${{github.workspace}}/artifacts
        cp build/src/lib/${{ env.APPNAME }}Core.lib ${{github.workspace}}/artifacts
        cp build/src/cli/${{ env.APPNAME }}.exe ${{github.workspace}}/artifacts
        cp build/test/${{ env.APPNAME }}Lang_TEST.exe ${{github.workspace}}/artifacts
        
        pushd ${{github.workspace}}
        zip -r ${{ env.APPNAME }}-$(uname -s)-$(uname -m)-llvm-win-cross.zip artifacts
        popd

    
    - name: 'Upload Pull Request Artifact'
      uses: actions/upload-artifact@v3
      if: startsWith(github.ref, 'refs/pull/') || startsWith(github.ref, 'refs/heads/feature/llvmWinBuild')
      with:
        name: ${{ env.APPNAME }}-llvm-win-cross.zip
        path: ${{ env.APPNAME }}-*.zip
        retention-days: 5
      
  test:
    needs: [build]
    runs-on: windows-latest
    name: Fetch & Run Tests on Windows
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Warf-llvm-win-cross.zip
    - name: Test in Windows
      run: |
        unzip Warf-llvm-win-cross.zip
        unzip Warf-llvm-win-cross.zip/Warf-Darwin-x86_64-llvm-win-cross.zip
        artifacts/WarfLang_TEST.exe
        rm -rf artifacts
        unzip Warf-llvm-win-cross.zip/Warf-Linux-x86_64-llvm-win-cross.zip
        artifacts/Warf.exe -e "1 + 2"
    