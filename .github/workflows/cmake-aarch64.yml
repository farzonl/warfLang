name: CMake Aarch64

on:
  push:
    branches:
      - master
    paths:
      - '**.cpp'
      - '**.h'
      - .github/workflows/cmake-aarch64.yml
  pull_request:
    branches:
      - '**'
    paths:
      - '**.cpp'
      - '**.h'
      - .github/workflows/cmake-arch64.yml
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  TARGET_TRIPLE: aarch64-unknown-linux-gnu

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: install cross-build dependencies
      run: |
        sudo apt install cmake ninja-build llvm-dev clang lld libc++-dev \
        libc++abi-dev zlib1g-dev git build-essential \
        ca-certificates crossbuild-essential-arm64 \
        libstdc++-$GCC_VERS-dev-arm64-cross qemu-user
    - name: setup sysroot
      run: |
        cd ${{github.workspace}} \
        && mkdir -p sysroots/aarch64-linux-gnu/usr \
        && cd sysroots/aarch64-linux-gnu/usr \
        && cp -r -v -L /usr/aarch64-linux-gnu/include /usr/aarch64-linux-gnu/lib . \
        && cd lib \
        && cp -r -v -L /usr/lib/gcc-cross/aarch64-linux-gnu/$GCC_VERS/*gcc* . \
        && cp -r -v -L /usr/lib/gcc-cross/aarch64-linux-gnu/$GCC_VERS/*crt* . \
        && cp -r -v -L /usr/lib/gcc-cross/aarch64-linux-gnu/$GCC_VERS/libsupc++.a . \
        && cp -r -v -L /usr/lib/gcc-cross/aarch64-linux-gnu/$GCC_VERS/libstdc++*  . \
        # Clean up
        && apt-get autoremove -y \
        && apt-get clean -y \
        && rm -rf /var/lib/apt/lists/* 
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
     - name: Cache sysroot Directory
      uses: actions/cache@v3
      with:
        path: |
          sysroots
        key: sysroots-cache-Release
        restore-keys: |
          sysroots-cache-Release
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
       cmake -S $GITHUB_WORKSPACE -B $GITHUB_WORKSPACE/build  \
          -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          -DCMAKE_INSTALL_PREFIX=/ \
          -DCMAKE_SYSROOT=$GITHUB_WORKSPACE/sysroots/aarch64-linux-gnu \
          -DCMAKE_C_COMPILER_TARGET=$TARGET_TRIPLE \
          -DCMAKE_CXX_COMPILER_TARGET=$TARGET_TRIPLE \
          -DCMAKE_ASM_COMPILER_TARGET=$TARGET_TRIPLE \
          -DCMAKE_C_FLAGS="-fuse-ld=lld" \
          -DCMAKE_CXX_FLAGS="-fuse-ld=lld" \
     - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
    - name: Set variables
      run: |
        APP=$(cat $GITHUB_WORKSPACE/src/lib/Version/appName.txt)
        VER=$(cat $GITHUB_WORKSPACE/src/lib/Version/version.txt)
        echo "VERSION=$VER" >> $GITHUB_ENV
        echo "APPNAME=$APP" >> $GITHUB_ENV
    - name: Test aarch64 via qemu
      working-directory: ${{github.workspace}}/build
      run: qemu-aarch64 -L sysroots/aarch64-linux-gnu/usr/ test/${{ env.APPNAME }}Lang_TEST
    - name: Prepare Binaries for upload 
      shell: bash
      run:  |
        mkdir ${{github.workspace}}/artifacts
        cp build/src/lib/lib${{ env.APPNAME }}Core${{ matrix.artifact_staticlib_ext }} ${{github.workspace}}/artifacts
        cp build/src/cli/${{ env.APPNAME }} ${{github.workspace}}/artifacts
        
        pushd ${{github.workspace}}
        zip -r ${{ env.APPNAME }}-$(uname -s)-$(uname -m).zip artifacts
        popd
    - name: 'Upload Pull Request Artifact'
      uses: actions/upload-artifact@v3
      if: startsWith(github.ref, 'refs/pull/')
      with:
        name: ${{ env.APPNAME }} Pull Request Artifacts
        path: ${{ env.APPNAME }}-*.zip
        retention-days: 5
    - name: Upload binaries to Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/heads/master')
      with:
        tag_name: ${{ env.APPNAME }}-${{ env.VERSION }}
        files: |
          ${{ env.APPNAME }}-*.zip